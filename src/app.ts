require('dotenv').config()
import {downloadFile, fetchData, writeFile} from './util-functions';
const csv = require('csvtojson')

const appData: AppData = {
  serverList: [],
  vulnList: [],
  ruleList: [],
};


const fetchServers = async () => {
  const serversData = await fetchData(process.env.URI_SERVERS, {method: 'GET', headers: {'Authorization': 'Aa123456!'}})
  appData.serverList = await serversData.json();
  console.log(appData.serverList)
}
const fetchVulns = async () => {
  const vulnsData = await fetchData(process.env.URI_VULNERABILITIES, {method: 'POST', body: JSON.stringify({startId: 1, amount: 10})})
  appData.vulnList = await vulnsData.json();
  console.log(appData.vulnList)
}
const fetchRules = async () => {
  await downloadFile(process.env.URI_RULES, {method: 'GET'}, process.env.CSV_RULES_FILE_PATH)
  const jsonInstance = csv()
  appData.ruleList = await jsonInstance.fromFile(process.env.CSV_RULES_FILE_PATH)
  console.log(appData.ruleList);
}

const fetchAllData = async () => {
    await fetchServers()
    await fetchVulns()
    await fetchRules()
}
const mainFunction = async () => {
  console.log('interval running')
  const results = []

  try {

    await fetchAllData()
    // calculate results
    appData.serverList.forEach(s => {
      appData.vulnList.forEach(v => {
        
        let trueRulesCounter = 0;
        appData.ruleList.forEach((r) => {
          let asset: Server | Vuln | null;
          let isRuleTrue = false;
          
          if (r.type.toLowerCase() === 'server') asset = s
          else if (r.type.toLowerCase() === 'vulnerability') asset = v
          else throw 'type unknown'

          // Check asset 
          if (r.operator.toLowerCase() === 'eq' && asset[r.parameter] === r.value) {
            isRuleTrue=true
          } else if (r.operator.toLowerCase() === 'gt' && parseInt(asset[r.parameter]) > parseInt(r.value)) {
            isRuleTrue=true
          } else if (r.operator.toLowerCase() === 'lt' && parseInt(asset[r.parameter]) < parseInt(r.value)) {
            isRuleTrue=true
          } else {
            isRuleTrue=false
          }

          if (isRuleTrue) {
            trueRulesCounter++
            if (trueRulesCounter === appData.ruleList.length) {
              // All rules is true -> vulnerable server
              results.push(`vulnerability ${v.name} with risk ${v.risk} discovered on ${s.hostname} ${s.ip}`)
            }
          } else {
            trueRulesCounter = 0
          }
        })
      })
    })

  } catch (error) {
    console.log(error)
  } finally {
    await writeFile(results, process.env.DETECTIONS_FILE_PATH)
    console.log('interval end')
  }
}
(async () => {
  console.log('starting...')
  mainFunction()
  setInterval(mainFunction, parseInt(process.env.INTERVAL_SECONDS))
})()


interface AppData {
  serverList: Server[],
  vulnList: Vuln[],
  ruleList: Rule[],
}

// { id: 6138450, hostname: 'server-36973', ip: '133.82.215.31', os: 'CentOS', osVersion: '3.1'},
interface Server {
  id: number,
  hostname: string,
  ip: string,
  os: string,
  osVersion: string,
}

// { id: 11, name: 'CVE-9388-5443', risk: 5.2, affects: 'Ubuntu_8.7' }
interface Vuln {
  id: number,
  name: string,
  risk: number,
  affects?: string,
}

// { type: 'server', parameter: 'os', operator: 'eq', value: 'CentOS' },
interface Rule {
  type: string,
  parameter: string,
  operator: string,
  value: string,
}